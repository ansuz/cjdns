#!/usr/bin/env node
/* -*- Mode:js */
/* vim: set expandtab ts=4 sw=4: */
/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Cjdns = require('../contrib/nodejs/cjdnsadmin/cjdnsadmin');
var nThen = require('../contrib/nodejs/cjdnsadmin/nthen');
var PubToIp6 = require('./lib/publicToIp6');
var Dns = require('dns');

var IP6_REGEX = new RegExp('^' + new Array(9).join(':[0-9a-f]{1,4}').substring(1) + '$');
var LABEL_REGEX = new RegExp('^' + new Array(5).join('.[0-9a-f]{4}').substring(1) + '$');
var ADDR_REGEX = new RegExp('^v[0-9]+' + new Array(5).join('\\.[0-9a-f]{4}') + '\\.[a-z0-9]{52}\\.k$');
var validTarget = function (target) {
    if (IP6_REGEX.test(target)) { return true; }
    if (LABEL_REGEX.test(target)) { return true; }
    if (ADDR_REGEX.test(target)) { return true; }
    return false;
};

var nodeToIP6 = function (nodeDesc) {
    var key = nodeDesc.replace(/.*\.([^.]*\.k)$/, function (all, one) { return one; });
    return PubToIp6.convert(key);
};

var highBits = function (nodeDesc) {
    var ip6 = nodeToIP6(nodeDesc);
    return ip6.substring(20,29);
}

var tracePath = function (target, queryNode, cjdns, cb, doneCb) {
    var lastNode = queryNode;
    var again = function () {
        cjdns.RouterModule_nextHop(target, lastNode, function (err, ret) {
            if (err) { throw err; }
            ret.from = lastNode;
            ret.fromIP6 = nodeToIP6(lastNode);
            cb(ret);
            if (ret.error !== 'none' || !ret.nodes || !ret.nodes.length) {
                doneCb(false);
                return;
            }
            if (ret.fromIP6 === target) {
                doneCb(true);
                return;
            }
            lastNode = ret.nodes[0];
            again();
        });
    };
    again();
};

var main = function (target) {
    if(!target){
        console.log("No target provided...\n...exiting");
        console.log("Next time try `./traceroute <ipv6 || AAAA record>`");
        return;
    }

    var cjdns;
    var self;
    var lastRet;
    nThen(function (waitFor) {
        // Section 1
        Cjdns.connectWithAdminInfo(waitFor(function (c) { cjdns = c; }));

        if (!validTarget(target)) {
            Dns.lookup(target, 6, waitFor(function (err, res) {
                if (err) { throw err; }
                console.log(target + ' has ip address ' + res);
                target = res;
            }));
        }

    }).nThen(function (waitFor) {
        // Section 2
        cjdns.RouterModule_getPeers("0000.0000.0000.0001", waitFor(function (err, ret) {
            if (err) { throw err; }
            self = ret.peers[0];
            console.log("\nSelf:\n%s",self);
        }));

    }).nThen(function (waitFor) {
        // Section 3
        process.stdout.write(self + ' ' + highBits(self));
        tracePath(target, self, cjdns, function (ret) {
            lastRet = ret;
            process.stdout.write('  ' + ret.ms + 'ms\n');
            if (ret.nodes && ret.nodes.length === 0) {
                console.log('cornered');
            } else if (ret.nodes && ret.nodes[0] !== ret.from) {
                process.stdout.write(ret.nodes[0] + ' ' + highBits(ret.nodes[0]));
            }else {
                console.error("Fell through conditional in section 3");
                console.error(ret);
                console.error();
            }
        }, waitFor());

    }).nThen(function (waitFor) {
        // Section 4
        console.error("Section 4\n");
        if (!lastRet || lastRet.nodes[0] !== lastRet.from) { return; }
        console.log('success, trying reverse trace');
        process.stdout.write(lastRet.from);
        tracePath(nodeToIP6(self), lastRet.from, cjdns, function (ret) {
            lastRet = ret;
            process.stdout.write('  ' + ret.ms + 'ms\n');
            if (ret.nodes && ret.nodes.length === 0) {
                console.log('cornered');
            } else if (ret.nodes && ret.nodes[0] !== ret.from) {
                process.stdout.write(ret.nodes[0] + ' ' + highBits(ret.nodes[0]));
                console.log("\nSection 4 elif");
                console.log(ret);

            } else{
                console.error("Fell through conditional in section 4");
                console.error(ret);
                console.error();
            }
        }, waitFor());

    }).nThen(function (waitFor) {
        // Section 5
        console.log();
        cjdns.disconnect();
    });
};

// we're looking for argv[2]
var args=process.argv.slice(2);

main(args[0]);
